module <%= "#{name.camelize}Component" %>
  module Handlers
    class Commands
      include EventStore::Messaging::Handler
      include EventStore::Messaging::StreamName
      include <%= "#{name.camelize}Component" %>::Commands
      include <%= "#{name.camelize}Component" %>::Events

      dependency :writer, EventStore::Messaging::Writer
      dependency :store, <%= "#{name.camelize}Component" %>::Store
      dependency :identifier, Identifier::UUID::Random
      dependency :clock, Clock::UTC

      def configure
        EventStore::Messaging::Writer.configure self
        PositionComponent::Store.configure self
        Identifier::UUID::Random.configure self
        Clock::UTC.configure self
      end
      
      # TODO replace real category name
      # category :entity

      # Example handler
      # handle Initiate do |initiate|
      #   logger.trace "Handling initiate"
      #   logger.data "#{initiate.inspect}"
      #   Validate.(initiate, scenario: :has_all_attributes)
      #
      #   entity_id = initiate.entity_id
      #
      #   entity = store.get(entity_id)
      #
      #   unless entity.nil?
      #     logger.debug "#{initiated} command was ignored. entity #{entity_id} was already initiated."
      #     return
      #   end
      #
      #   initiated = Initiated.proceed initiate
      #
      #   initiated.processed_time = clock.iso8601
      #
      #   stream_name = stream_name(entity_id)
      #
      #   writer.write_initial initiated, stream_name
      #   logger.debug "Handled initiate"
      #end
    end
  end
end